#require "../dsa.eflint". 
#require "mahiru.eflint". 

// Every member has/is a site
// This rule derives top-down: adding a member to the K.B. also adds a site
Fact site Derived from member

// Every data-asset is a dataset
// This rule derives bottom-up: adding a data-asset (Mahiru concept) to the K.B. also adds a dataset (DIPG concept)
Fact dataset Derived from data.asset 

// { TODO perhaps move to mahiru.eflint
// `local-site` indicates on which site 'this' eflint instance is running
Fact local-site Identified by site

// Rule: the `local-site` is the owner of the local assets
Extend Fact owner-of Derived from owner-of(local-site.site, asset) 
// }

// Allow access to an asset when it is been selected for a project that has been approved and consent has been given
Extend Fact may-access // params: site, asset
  Holds when (Exists project: 
        approved(member=site,project=project)
    &&  selected(dataset=asset,project=project)
    && (Forall donor: derived-consent(controller=local-site.site,subject=donor,purpose=project)))

// The below implements policy that states 'consent for DIPGResearch is consent for all DIPG projects'
Fact derived-consent Identified by subject * controller * purpose
  Holds when consent(subject,controller,purpose)
            ,project(purpose) && consent(subject,controller,DIPGResearch)

// Alternative handling of consent:
// Restrict access modularly with the condition of consent for DIPGResearch (requires may-access being an act) 
// Extend Act may-access // params:site, asset
//  Conditioned by consent(controller=local-site, data=asset, purpose=DIPGResearch)

// Allow access to third-parties when permission is given by committee
Extend Fact may-access // params: site, asset
  Holds when written-consent(thirdparty=site,researcher=site',dataset=asset) When owner-of(site', asset)

// Extend `project` with a derivation rule such that every approved project is a project
// This way projects do not have to be created explicitly
Extend Fact project Derived from approved.project


